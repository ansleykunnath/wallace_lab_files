import socket
import json
import struct
import time

# Connect to Kernel SDK (acquisition computer)
server_ip = '192.168.1.100'  # Replace with correct IP
server_port = 6767  # Kernel SDK Port
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Attempt connection
try:
    sock.connect((server_ip, server_port))
    sock.settimeout(5)  # 5-second timeout
except (socket.timeout, socket.error) as e:
    print(f"Connection failed: {e}")
    sock = None  # No connection established

# Global event ID counter
event_id = 1

# Function to send event
def send_event(event_name, event_value):
    global event_id
    if sock:  # Ensure connection is alive
        try:
            timestamp = int(time.time() * 1e6)  # Get timestamp in microseconds
            payload = {
                'id': event_id,
                'timestamp': timestamp,
                'event': event_name,
                'value': event_value
            }
            event_id += 1
            
            # Convert the JSON payload to bytes
            json_bytes = json.dumps(payload).encode('utf-8')
            
            # Send the size of the JSON payload (4-byte unsigned int, network/big-endian)
            sock.sendall(struct.pack('!I', len(json_bytes)))
            
            # Send the actual JSON payload
            sock.sendall(json_bytes)
            
            print(f"Event '{event_name}' sent successfully")
        except (socket.timeout, socket.error) as e:
            print(f"Failed to send event '{event_name}': {e}")
    else:
        print(f"Skipping event '{event_name}' due to connection failure.")
