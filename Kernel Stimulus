import socket
import json
import struct
import time
from datetime import datetime
from psychopy import visual, core, event

# TCP setup
server_ip = '10.74.183.108'  # IP address of the Flow2 data acquisition computer
server_port = 6767  # Kernel SDK port
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Try to connect with timeout and handle connection errors
try:
    sock.connect((server_ip, server_port))
    sock.settimeout(5)  # Set timeout to 5 seconds
except (socket.timeout, socket.error) as e:
    print(f"TCP connection failed: {e}")
    sock = None  # Set sock to None if connection fails

# Function to send events via TCP
event_id = 1

def send_event(event_name, event_value):
    global event_id
    if sock:  # Only try to send if the connection is established
        try:
            timestamp = int(time.time() * 1e6)  # Get timestamp in microseconds
            payload = {
                'id': event_id,
                'timestamp': timestamp,
                'event': event_name,
                'value': event_value
            }
            event_id += 1
            
            # Convert payload to JSON bytes
            json_bytes = json.dumps(payload).encode('utf-8')
            
            # Send the size of the JSON payload (4-byte unsigned int)
            sock.sendall(struct.pack('>I', len(json_bytes)))
            
            # Send the actual JSON payload
            sock.sendall(json_bytes)
        except (socket.timeout, socket.error) as e:
            print(f"Failed to send event '{event_name}': {e}")
    else:
        print(f"Skipping event '{event_name}' due to TCP connection failure.")

# Set up PsychoPy window
win = visual.Window(size=(2560, 1440), fullscr=True, monitor='display_stimuli', screen=1, units='pix')
win.color = "black"  # Set the window color to black

# Send start_experiment event
send_event('start_experiment', '1')

# Initial 10-second black screen
win.flip()  # Display the black screen
send_event('start_blank_screen', '1')  # Event for the start of the blank screen
core.wait(10)  # Wait for 10 seconds
send_event('end_blank_screen', '1')  # Event for the end of the blank screen

# Parameters for checkerboard
check_size = 20  # Size of each square in pixels
check_freq = 1   # Frequency of checkerboard flash (Hz)
duration = 10    # Duration for each checkerboard or blank screen period
fixation_size = 30
lineWidth = 15
num_squares = 260  # Number of squares for the checkerboard

# Create checkerboard stimulus
colors = [[-1, 1] if (x + y) % 2 == 0 else [1, -1] for x in range(num_squares) for y in range(num_squares)]
checkerboard = visual.ElementArrayStim(win, nElements=num_squares**2, sizes=(check_size, check_size),
                                       xys=[((x - num_squares // 2) * check_size, (y - num_squares // 2) * check_size)
                                            for x in range(num_squares) for y in range(num_squares)],
                                       elementTex=None, elementMask=None, colors=colors, colorSpace='rgb')

# Create fixation point stimulus
fixation_vertical = visual.Line(win, start=(0, -fixation_size), end=(0, fixation_size), lineColor="red", lineWidth=lineWidth)
fixation_horizontal = visual.Line(win, start=(-fixation_size, 0), end=(fixation_size, 0), lineColor="red", lineWidth=lineWidth)

# Main loop: 10 seconds of blank screen followed by 10 seconds of checkerboard (repeated 10 times)
for cycle in range(10):
    # 10 seconds of checkerboard stimulus
    send_event(f'start_checkerboard', str(cycle + 1))  # Event for the start of the checkerboard
    start_time = core.getTime()
    while core.getTime() - start_time < duration:
        t = core.getTime() - start_time
        phase = int(t * check_freq) % 2
        colors = [[-1, -1, -1] if (x + y + phase) % 2 == 0 else [1, 1, 1]
                  for x in range(num_squares) for y in range(num_squares)]
        checkerboard.colors = colors
        checkerboard.draw()
        fixation_vertical.draw()
        fixation_horizontal.draw()
        win.flip()  # Refresh the window with the updated checkerboard
    send_event(f'end_checkerboard', str(cycle + 1))  # Event for the end of the checkerboard

    # 10 seconds of blank screen
    win.flip()  # Clear the screen to black
    send_event(f'start_blank_screen', str(cycle + 1))  # Event for the start of the blank screen
    core.wait(10)  # Wait for 10 seconds
    send_event(f'end_blank_screen', str(cycle + 1))  # Event for the end of the blank screen

    # Check for early termination
    if 'escape' in event.getKeys():
        send_event('end_experiment', '1')  # Send end_experiment before exiting
        win.close()
        core.quit()

# Send end_experiment event
send_event('end_experiment', '1')

# Clean up and close the window
if sock:
    sock.close()
win.close()
core.quit()
