from psychopy import visual, core, event
from pylsl import StreamInfo, StreamOutlet
import time
from datetime import datetime

# Set up window
win = visual.Window(size=(2560, 1440), fullscr=True, monitor='display_stimuli', screen=1, units='pix')
win.color = "black"

# Set up LSL
info = StreamInfo(name="VEP", type="Markers", channel_count=1, nominal_srate=1, channel_format="int32", source_id="VEP")
outlet = StreamOutlet(info)

# Parameters
check_size = 20  # Size of each square in pixels
check_freq = 1   # Frequency of checkerboard flash (Hz)
alternation_duration = 10  # Duration of checkerboard alternation (seconds)
blank_duration = 10  # Duration of blank screen (seconds)
fixation_size = 30
lineWidth = 15

# Calculate number of squares horizontally and vertically to cover the entire screen
num_squares_x = int(win.size[0] / check_size)
num_squares_y = int(win.size[1] / check_size)

# Create checkerboard stimulus
colors = [[-1, 1] if (x + y) % 2 == 0 else [1, -1]
          for x in range(num_squares_x) for y in range(num_squares_y)]
checkerboard = visual.ElementArrayStim(win, nElements=num_squares_x * num_squares_y, sizes=(check_size, check_size),
                                       xys=[((x - num_squares_x // 2) * check_size, (y - num_squares_y // 2) * check_size)
                                            for x in range(num_squares_x) for y in range(num_squares_y)],
                                       elementTex=None, elementMask=None, colors=colors, colorSpace='rgb')

# Create fixation point stimulus
fixation_vertical = visual.Line(win, start=(0, -fixation_size), end=(0, fixation_size), lineColor="red", lineWidth=lineWidth)
fixation_horizontal = visual.Line(win, start=(-fixation_size, 0), end=(fixation_size, 0), lineColor="red", lineWidth=lineWidth)

# Start with a 10 second blank screen
print("Blank screen at the beginning for 10 seconds.")
win.color = "black"
win.flip()
core.wait(blank_duration)

# Main loop to alternate 10 times
for n in range(10):
    # Send event marker for the nth checkerboard start
    checkerboard_event_marker = n + 1
    outlet.push_sample([checkerboard_event_marker])  # Marker for nth checkerboard start
    print(f"Checkerboard start, iteration {n+1}, event marker: {checkerboard_event_marker}")
    
    # Checkerboard alternation for 10 seconds
    start_time = core.getTime()
    while core.getTime() - start_time < alternation_duration:
        # Check for key press to terminate
        if 'escape' in event.getKeys():
            print("Experiment terminated by user.")
            win.close()
            core.quit()

        t = core.getTime() - start_time
        phase = int(t * check_freq) % 2
        colors = [[-1, -1, -1] if (x + y + phase) % 2 == 0 else [1, 1, 1]
                  for x in range(num_squares_x) for y in range(num_squares_y)]
        checkerboard.colors = colors
        checkerboard.draw()
        fixation_vertical.draw()
        fixation_horizontal.draw()
        win.flip()

    # Send event marker for the blank screen start
    blank_screen_marker = 100  # Constant event marker for blank screen
    outlet.push_sample([blank_screen_marker])
    print(f"Blank screen start, iteration {n+1}, event marker: {blank_screen_marker}")

    # Blank screen for 10 seconds
    win.color = "black"
    win.flip()
    core.wait(blank_duration)

    # Check for key press to terminate
    if 'escape' in event.getKeys():
        print("Experiment terminated by user.")
        win.close()
        core.quit()

# Clean up
outlet.push_sample([999])  # Final marker to indicate experiment ended
print("Experiment end")
win.close()
core.quit()
